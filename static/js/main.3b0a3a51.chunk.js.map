{"version":3,"sources":["validation/authValidation.tsx","actions/types.tsx","utils/authentication.tsx","components/layout/Navbar.tsx","components/hooks/customHooks.tsx","components/auth/Login.tsx","components/auth/Register.tsx","utils/api.tsx","utils/lib.tsx","actions/users.actions.tsx","actions/posts.actions.tsx","actions/comments.actions.tsx","components/routing/AuthenticatedRoute.tsx","components/layout/FormModal.tsx","validation/postValidation.tsx","components/posts/AddPost.tsx","components/posts/EditPost.tsx","components/posts/Posts.tsx","components/layout/NotFound.tsx","components/comments/Comments.tsx","validation/userValidation.tsx","components/users/AddUser.tsx","components/users/EditUser.tsx","components/users/Users.tsx","components/routing/Routes.tsx","App.tsx","serviceWorker.ts","reducers/auth.reducer.tsx","reducers/users.reducer.tsx","reducers/posts.reducer.tsx","reducers/comments.reducer.tsx","reducers/index.tsx","index.tsx"],"names":["Joi","object","username","string","alphanum","max","min","required","password","SET_AUTH","usersDb","users","validateInput","dispatch","error","authValidation","validate","type","auth","status","toast","message","Navbar","useDispatch","useSelector","state","Menu","Item","header","position","name","icon","as","Link","to","onClick","logout","useFormInput","initialValue","useState","value","setValue","props","onChange","event","target","reset","Login","history","useHistory","Form","Field","Input","Button","loading","user","login","push","Register","register","domain","get","path","a","fetch","response","ok","json","postApi","payload","method","body","JSON","stringify","headers","deleteApi","id","update","getGravatar","email","hash","md5","getUsers","usesWithAvatar","map","avatar","deleteUser","newUsers","filter","addUser","newUser","unshift","updateUser","updatedUser","foundUser","find","u","Object","assign","getPosts","posts","deletePost","newPosts","post","addPost","newPost","updatePost","updatedPost","foundPost","p","getComments","comments","AuthenticatedRoute","Component","component","rest","userDispatch","postsDispatch","commentsDispatch","useEffect","render","FormModal","triggerProps","inputs","submitProps","modalState","loadingState","title","Modal","trigger","style","marginBottom","setOpenModal","closeOnDimmerClick","closeIcon","closeOnEscape","open","openModal","Header","Content","input","key","TextArea","isLoading","positive","disabled","content","negative","postValidation","number","userId","AddPost","postDispatch","setIsLoading","handleAddPost","postInput","color","EditPost","handleEditPost","Posts","match","params","Number","selectUserPosts","createSelector","userPosts","handlePostDelete","Group","divided","verticalAlign","Description","Extra","marginTop","length","NotFound","textAlign","Icon","Subheader","Comments","selectPostComments","comment","postId","postComments","Comment","goBack","dividing","Avatar","src","Author","Text","userValidation","minDomainSegments","tlds","allow","AddUser","handleAddUser","userInput","EditUser","handleUpdateUser","Users","handleUserDelete","Card","Image","wrapped","ui","Meta","extra","Routes","Container","exect","App","basename","process","Boolean","window","location","hostname","initialState","allReducers","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3b0a3a51.chunk.js","sourcesContent":["import Joi from '@hapi/joi';\n\nexport default Joi.object({\n  username: Joi.string().alphanum().max(16).min(2).required(),\n  password: Joi.string().max(32).min(6).required(),\n});\n","export const SET_AUTH = 'SET_AUTH';\nexport const SET_USERS = 'SET_USERS';\nexport const CLEAR_USERS = 'CLEAR_USERS';\nexport const SET_POSTS = 'SET_POSTS';\nexport const CLEAR_POSTS = 'CLEAR_POSTS';\nexport const SET_COMMENTS = 'SET_COMMENTS';\nexport const CLEAR_COMMENTS = 'CLEAR_COMMENTS';\n\n","import { Dispatch } from 'react';\nimport { toast } from 'react-toastify';\n\nimport authValidation from '../validation/authValidation';\nimport users from './users.json';\nimport { SET_AUTH, CLEAR_USERS, CLEAR_POSTS, CLEAR_COMMENTS } from '../actions/types';\nimport { AuthAction } from '../models/AuthAction';\n\n\ninterface usersModal {\n  [username: string]: string\n};\n\nconst usersDb: usersModal = users;\n\n// Validate auth details with schema\nconst validateInput = (username: string, password: string, dispatch: Dispatch<AuthAction>): boolean => {\n  const { error } = authValidation.validate({ username, password });\n  if (error) {\n    dispatch({ type: SET_AUTH, auth: { status: 'unauthorized' } });\n    toast.error(error.message);\n    return false;\n  }\n  return true;\n}\n\nexport const register = (username: string, password: string, dispatch: Dispatch<AuthAction>): boolean => {\n  const isValid = validateInput(username, password, dispatch);\n  if (!isValid) {\n    return false;\n  }\n\n  // Check if user already exists\n  if (usersDb[username]) {\n    toast.error('User already exists');\n    dispatch({ type: SET_AUTH, auth: { status: 'unauthorized' } });\n    return false;\n  }\n\n  // create user and auth them\n\n  dispatch({ type: SET_AUTH, auth: { status: 'authorized' } });\n  return true;\n};\n\nexport const login = (username: string, password: string, dispatch: Dispatch<AuthAction>): boolean => {\n  const isValid = validateInput(username, password, dispatch);\n  if (!isValid) {\n    return false;\n  }\n\n  const user = usersDb[username];\n\n  // Check if user exists\n  if (!user) {\n    toast.error(`User doesn't exist`);\n    dispatch({ type: SET_AUTH, auth: { status: 'unauthorized' } });\n    return false;\n  }\n\n  // Check if the provided password was correct\n  if (user !== password) {\n    toast.error(`Wrong password`);\n    dispatch({ type: SET_AUTH, auth: { status: 'unauthorized' } });\n    return false;\n  }\n\n  // Set the auth status\n  dispatch({ type: SET_AUTH, auth: { status: 'authorized' } });\n\n  return true;\n};\n\nexport const logout = (dispatch: Dispatch<any>): boolean => {\n  dispatch({ type: SET_AUTH, auth: { status: 'unauthorized' } });\n  dispatch({ type: CLEAR_USERS });\n  dispatch({ type: CLEAR_POSTS });\n  dispatch({ type: CLEAR_COMMENTS });\n  return true;\n};\n\n","import React from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Auth } from '../../models/Auth';\nimport { logout } from '../../utils/authentication';\nimport { Link } from 'react-router-dom';\nimport { State } from '../../models/State';\n\nfunction Navbar() {\n  const dispatch = useDispatch();\n\n  const auth: Auth = useSelector((state: State) => state.auth);\n\n  const handleLogout = (): void => {\n    logout(dispatch);\n  }\n\n  return (\n    <Menu>\n      <Menu.Item header>User Management</Menu.Item>\n      <Menu.Menu position='right'>\n        {auth.status === 'authorized'\n        ? \n          <>\n            <Menu.Item\n              name='Users'\n              icon='users'\n              as={Link}\n              to='/users'\n            />\n            <Menu.Item\n              name='Logout'\n              icon='sign-out'\n              onClick={handleLogout}\n            />\n          </>\n        :\n          <>\n            <Menu.Item\n              name='Login'\n              icon='sign-in'\n              as={Link}\n              to='/login'\n            />\n            <Menu.Item\n              name='Register'\n              icon='signup'\n              as={Link}\n              to='/register'\n            />\n          </>\n        }\n      </Menu.Menu>\n    </Menu>\n  );\n\n}\n\nexport default Navbar;\n","import { useState, BaseSyntheticEvent } from 'react'; \n\nexport const useFormInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (event: BaseSyntheticEvent) => {\n    setValue(event.target.value);\n  };\n\n  const reset = () => {\n    setValue('');\n  }\n\n  return {\n    props: {\n      value,\n      onChange: handleChange,\n    },\n    reset,\n  }\n}","import React, { Dispatch } from 'react'\nimport { Button, Form } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { login } from '../../utils/authentication';\nimport { Auth } from '../../models/Auth';\nimport { AuthAction } from '../../models/AuthAction';\nimport { SET_AUTH } from '../../actions/types';\nimport { useFormInput } from '../hooks/customHooks';\nimport { useHistory } from 'react-router-dom';\nimport { State } from '../../models/State';\n\nexport function Login() {\n  const dispatch: Dispatch<AuthAction> = useDispatch();\n  \n  const username = useFormInput('');\n  const password = useFormInput('');\n\n  const history = useHistory();\n\n  const auth: Auth = useSelector((state: State) => state.auth);\n  \n  const handleLogin = () => {\n    // Set auth status to loading\n    const authAction: AuthAction = { type: SET_AUTH, auth: { status: 'loading' } };\n    dispatch(authAction);\n\n    // Pass credentials to login for validation and authing\n    const isLoggedIn: boolean = login(username.props.value, password.props.value, dispatch);\n    if (isLoggedIn) {\n      history.push('/users');\n    }\n  };\n\n  return (\n    <Form>\n      <Form.Field>\n        <label>Username</label>\n        <Form.Input { ...username.props } />\n      </Form.Field>\n      <Form.Field>\n        <label>Password</label>\n        <Form.Input type='password' { ...password.props } />\n      </Form.Field>\n      <Button loading={auth.status === 'loading'} onClick={handleLogin}>Login</Button>\n    </Form>\n  );\n}\n","import React from 'react'\nimport { Button, Form } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { register } from '../../utils/authentication';\nimport { Auth } from '../../models/Auth';\nimport { AuthAction } from '../../models/AuthAction';\nimport { SET_AUTH } from '../../actions/types';\nimport { State } from '../../models/State';\nimport { useFormInput } from '../hooks/customHooks';\n\nexport function Register() {\n  const dispatch = useDispatch();\n  \n  const username = useFormInput('');\n  const password = useFormInput('');\n\n  const history = useHistory();\n\n  const auth: Auth = useSelector((state: State) => state.auth);\n  \n  const handleRegister = () => {\n    // Set auth status to loading\n    const authAction: AuthAction = { type: SET_AUTH, auth: { status: 'loading' } };\n    dispatch(authAction);\n\n    // Pass credentials to register for validation and authing\n    const hasRegistered: boolean = register(username.props.value, password.props.value, dispatch);\n    if (hasRegistered) {\n      history.push('/users');\n    }\n  };\n\n  return (\n    <Form>\n      <Form.Field>\n        <label>Username</label>\n        <Form.Input { ...username.props } />\n      </Form.Field>\n      <Form.Field>\n        <label>Password</label>\n        <Form.Input type='password' { ...password.props } />\n      </Form.Field>\n      <Button loading={auth.status === 'loading'} onClick={handleRegister}>Register</Button>\n    </Form>\n  );\n}\n","import { toast } from 'react-toastify';\n\nconst domain = 'https://jsonplaceholder.typicode.com';\n\n/**\n * Get api call\n * @param path endpoint\n */\nexport const get = async (path: string) => {\n  try {\n    const response: Response = await fetch(`${domain}${path}`);\n    if (response.ok) {\n      return await response.json();\n    }\n  } catch (error) {\n    toast.error('Something went wrong when trying to call the api - get');\n  }\n};\n\n/**\n * Post api call\n * @param path endpoint\n * @param payload data we want to add\n */\nexport const postApi = async (path: string, payload: any) => {\n  try {\n    const response: Response = await fetch(`${domain}${path}`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ...payload\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    }\n  } catch (error) {\n    toast.error('Something went wrong when trying to call the api - post');\n  }\n};\n\n/**\n * Delete api call\n * @param path what you want to delete ie (/posts/1 || /users/1)\n */\nexport const deleteApi = async (id: number | undefined, type: string) => {\n  try {\n    const response: Response = await fetch(`${domain}/${type}/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      return await response.json();\n    }\n  } catch (error) {\n    toast.error('Something went wrong when trying to call the api - post');\n  }\n};\n\n/**\n * Post api call\n * @param path endpoint\n * @param payload data we want to update\n */\nexport const update = async (path: string, payload: any) => {\n  try {\n    const response: Response = await fetch(`${domain}${path}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        ...payload\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    }\n  } catch (error) {\n    toast.error('Something went wrong when trying to call the api - put');\n  }\n};","import md5 from 'md5';\n\nexport const getGravatar = (email: string) => {\n  const hash = md5(email);\n  const img = `https://www.gravatar.com/avatar/${hash}`;\n  return img;\n};\n","import { Dispatch } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { User } from '../models/User'\nimport { SET_USERS } from './types';\nimport { get, deleteApi, update, postApi } from '../utils/api';\nimport { UsersAction } from '../models/UsersAction';\nimport { getGravatar } from '../utils/lib';\n\nexport const setUsers = (users: Array<User>) => {\n  return { type: SET_USERS, users };\n};\n\n/**\n * Get users\n * @param dispatch Set users to state\n */\nexport const getUsers = async (dispatch: Dispatch<UsersAction>): Promise<void> => {\n  try {\n    const users: Array<User> = await get('/users');\n    const usesWithAvatar: Array<User> = users.map((user: User) => {\n      user.avatar = getGravatar(user.email)\n      return user;\n    });\n    dispatch({ type: SET_USERS, users: usesWithAvatar });\n  } catch (error) {\n    toast.error('Something went wrong when trying to get users');\n  }\n};\n\n/**\n * Delete a user\n * @param id id of user\n * @param users Users from state\n * @param dispatch Set new state without user\n */\nexport const deleteUser = async (id: number | undefined, users: Array<User>, dispatch: Dispatch<UsersAction>): Promise<void> => {\n  try {\n    await deleteApi(id, 'users');\n    const newUsers: Array<User> = users.filter((user: User) => user.id !== id);\n    dispatch({ type: SET_USERS, users: newUsers });\n  } catch (error) {\n    toast.error('Something went wrong when trying to delete the user');\n  }\n};\n\n/**\n * Add a new user\n * @param user New user\n * @param users Users from state\n * @param dispatch Set new user to state\n */\nexport const addUser = async (user: User, users: Array<User>, dispatch: Dispatch<UsersAction>): Promise<void> => {\n  try {\n    const newUser: User = await postApi('/users', user);\n    newUser.avatar = getGravatar(newUser.email);\n    users.unshift(newUser);\n    const newUsers: Array<User> = users;\n    dispatch({ type: SET_USERS, users: [...newUsers] });\n  } catch (error) {\n    toast.error('Something went wrong when trying to add a user');\n  }\n};\n\n/**\n * Update user\n * @param user Updated user\n * @param users Users from state\n * @param dispatch Update state with new user\n */\nexport const updateUser = async (user: User, users: Array<User>, dispatch: Dispatch<UsersAction>): Promise<void> => {\n  try {\n    const updatedUser: User = await update(`/users/${user.id}`, user);\n    updatedUser.avatar = getGravatar(updatedUser.email);\n    const foundUser = users.find((u: User) => u.id === user.id);\n    Object.assign(foundUser, updatedUser);\n    dispatch({ type: SET_USERS, users: [...users] });\n  } catch (error) {\n    toast.error('Something went wrong when trying to update a user');\n  }\n};\n","import { Dispatch } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { SET_POSTS } from './types';\nimport { get, deleteApi, postApi, update } from '../utils/api';\nimport { Post } from '../models/Post';\nimport { PostsAction } from '../models/PostsAction';\n\nexport const setPosts = (posts: Array<Post>) => {\n  return { type: SET_POSTS, posts };\n}\n\n/**\n * Get posts from endpoint\n * @param dispatch Set the posts to state\n */\nexport const getPosts = async (dispatch: Dispatch<PostsAction>): Promise<void> => {\n  try {\n    const posts: Array<Post> = await get(`/posts`);\n    dispatch({ type: SET_POSTS, posts });\n  } catch (error) {\n    toast.error('Something went wrong when trying to get posts');\n  }\n}\n\n/**\n * Delete a post\n * @param id the id of the post\n * @param posts all of the posts from state\n * @param dispatch set new state with new posts\n */\nexport const deletePost = async (id: number | undefined, posts: Array<Post>, dispatch: Dispatch<PostsAction>): Promise<void> => {\n  try {\n    await deleteApi(id, 'posts');\n    const newPosts: Array<Post> = posts.filter((post: Post) => post.id !== id);\n    dispatch({ type: SET_POSTS, posts: newPosts });\n  } catch (error) {\n    toast.error('Something went wrong when trying to delete the post');\n  }\n};\n\n/**\n * Add a new post\n * @param post The post we want to add to the DB and state\n * @param posts Posts from state\n * @param dispatch Set new post to state\n */\nexport const addPost = async (post: Post, posts: Array<Post>, dispatch: Dispatch<PostsAction>): Promise<void> => {\n  try {\n    const newPost: Post = await postApi('/posts', post);\n    posts.unshift(newPost);\n    const newPosts: Array<Post> = posts;\n    dispatch({ type: SET_POSTS, posts: [...newPosts] });\n  } catch (error) {\n    toast.error('Something went wrong when trying to add a post');\n  }\n};\n\n/**\n * Update post\n * @param post Updated post\n * @param posts Posts from state\n * @param dispatch Update post in state\n */\nexport const updatePost = async (post: Post, posts: Array<Post>, dispatch: Dispatch<PostsAction>): Promise<void> => {\n  try {\n    const updatedPost: Post = await update(`/posts/${post.id}`, post);\n    const foundPost = posts.find((p: Post) => p.id === post.id);\n    Object.assign(foundPost, updatedPost);\n    dispatch({ type: SET_POSTS, posts: [...posts] });\n  } catch (error) {\n    toast.error('Something went wrong when trying to update a post');\n  }\n};\n","import { Dispatch } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { SET_COMMENTS } from './types';\nimport { get } from '../utils/api';\nimport { Comment } from '../models/Comment';\nimport { CommentsAction } from '../models/CommentsAction';\n\nexport const setComments = (comments: Array<Comment>) => {\n  return { type: SET_COMMENTS, comments };\n}\n\n/**\n * Get comments from endpoint\n * @param dispatch set the comments to state\n */\nexport const getComments = async (dispatch: Dispatch<CommentsAction>): Promise<void> => {\n  try {\n    const comments: Array<Comment> = await get(`/comments`);\n    dispatch({ type: SET_COMMENTS, comments });\n  } catch (error) {\n    toast.error('Something went wrong when trying to get comments');\n  }\n}\n","import React, { useEffect, Dispatch } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Auth } from '../../models/Auth';\nimport { getUsers } from '../../actions/users.actions';\nimport { getPosts } from '../../actions/posts.actions';\nimport { getComments } from '../../actions/comments.actions';\nimport { UsersAction } from '../../models/UsersAction';\nimport { PostsAction } from '../../models/PostsAction';\nimport { CommentsAction } from '../../models/CommentsAction';\nimport { State } from '../../models/State';\n\n// Check if the user is logged in\nexport function AuthenticatedRoute({ component: Component, ...rest }: any) {\n  const userDispatch: Dispatch<UsersAction> = useDispatch();\n  const postsDispatch: Dispatch<PostsAction> = useDispatch();\n  const commentsDispatch: Dispatch<CommentsAction> = useDispatch();\n\n  // Get auth state\n  const auth: Auth = useSelector((state: State) => state.auth);\n\n  // Get all of the users, posts and comments and set to state\n  useEffect((): void => {\n    getUsers(userDispatch);\n    getPosts(postsDispatch);\n    getComments(commentsDispatch);\n  }, [userDispatch, postsDispatch, commentsDispatch]);\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        auth.status === 'authorized'\n          ? <Component {...props} />\n          : <Redirect\n              to='/login'\n            />}\n    />\n  );\n}","import React from 'react';\nimport { Button, Modal, Form } from 'semantic-ui-react';\n\nimport { FormModalProps } from '../../models/FormModalProps';\n\nexport function FormModal(props: FormModalProps) {\n  const { triggerProps, inputs, submitProps, update, modalState, loadingState, title } = props;\n\n  const handleOpen = () => {\n    modalState.setOpenModal(true);\n  };\n\n  const handleClose = () => {\n    modalState.setOpenModal(false);\n  };\n\n  return (\n    <Modal\n      trigger={<Button style={{ marginBottom: 10 }} onClick={handleOpen} {...triggerProps} />}\n      closeOnDimmerClick={false}\n      closeIcon={false}\n      closeOnEscape={false}\n      open={modalState.openModal}\n    >\n      <Modal.Header>{ title }</Modal.Header>\n      <Modal.Content>\n        <Form>\n          {inputs.map((input: any) => {\n            if (input.type === 'field') {\n              return (\n                <Form.Field key={input.id}>\n                  <label>{ input.title }</label>\n                  <Form.Input { ...input.props } />\n                </Form.Field>\n              )\n            }\n            if (input.type === 'textarea') {\n              return (\n                <Form.Field key={input.id}>\n                  <label>{ input.title }</label>\n                  <Form.TextArea { ...input.props } />\n                </Form.Field>\n              )\n            }\n          })}\n          <Button loading={loadingState.isLoading} onClick={update} {...submitProps} positive />\n          <Button disabled={loadingState.isLoading} onClick={handleClose} icon='cancel' content='Cancel' negative />\n        </Form>\n      </Modal.Content>\n    </Modal>\n  );\n}","import Joi from '@hapi/joi';\n\nexport const postValidation = Joi.object({\n  id: Joi.number(),\n  userId: Joi.number(),\n  title: Joi.string().required(),\n  body: Joi.string().required(),\n});\n","import React, { useState, Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { useFormInput } from '../hooks/customHooks';\nimport { State } from '../../models/State';\nimport { FormModal } from '../layout/FormModal';\nimport { PostsAction } from '../../models/PostsAction';\nimport { Post } from '../../models/Post';\nimport { postValidation } from '../../validation/postValidation';\nimport { addPost } from '../../actions/posts.actions';\n\ninterface Props {\n  userId: number;\n}\n\nexport function AddPost(props: Props) {\n\n  const postDispatch: Dispatch<PostsAction> = useDispatch();\n  const posts: Array<Post> = useSelector((state: State) => state.posts);\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ openModal, setOpenModal ] = useState(false);\n\n  const title = useFormInput('');\n  const body = useFormInput('');\n\n  const handleAddPost = async (): Promise<boolean> => {\n    const postInput: Post = { title: title.props.value, body: body.props.value, userId: props.userId };\n\n    // Check if the post input is correct\n    const { error } = postValidation.validate(postInput);\n    if (error) {\n      toast.error(error.message);\n      return false;\n    }\n\n    // Set the button to loading \n    setIsLoading(true);\n\n    try {\n      await addPost(postInput, posts, postDispatch);\n  \n      // Set the button to stop loading\n      setIsLoading(false);\n  \n      // Close the modal\n      setOpenModal(false);\n\n      // Reset inputs\n      title.reset();\n      body.reset();\n\n      return true;\n    } catch (error) {\n      // Set the button to stop loading\n      setIsLoading(false);\n\n      toast.error('Something went wrong when trying to add a post');\n      return false;\n    }\n  }\n\n  return (\n    <FormModal\n      title='Add post'\n      triggerProps = {{ icon: 'add', content: 'Add post', color: 'green' }}\n      inputs = {[\n        { id: 0, type: 'field', title: 'Title', props: title.props },\n        { id: 1, type: 'textarea', title: 'Body', props: body.props }\n      ]}\n      submitProps = {{ icon: 'add', content: 'Add post' }}\n      update = { handleAddPost }\n      loadingState = {{ isLoading, setIsLoading }}\n      modalState = {{ openModal, setOpenModal }}\n    />\n  );\n\n}\n","import React, { useState, Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { useFormInput } from '../hooks/customHooks';\nimport { State } from '../../models/State';\nimport { FormModal } from '../layout/FormModal';\nimport { PostsAction } from '../../models/PostsAction';\nimport { Post } from '../../models/Post';\nimport { postValidation } from '../../validation/postValidation';\nimport { updatePost } from '../../actions/posts.actions';\n\ninterface Props {\n  post: Post;\n}\n\nexport function EditPost(props: Props) {\n\n  const postDispatch: Dispatch<PostsAction> = useDispatch();\n  const posts: Array<Post> = useSelector((state: State) => state.posts);\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ openModal, setOpenModal ] = useState(false);\n\n\n  const title = useFormInput(props.post.title);\n  const body = useFormInput(props.post.body);\n\n  const handleEditPost = async (): Promise<boolean> => {\n    const postInput: Post = { id: props.post.id, title: title.props.value, body: body.props.value, userId: props.post.userId };\n\n    // Check if the post input is correct\n    const { error } = postValidation.validate(postInput);\n    if (error) {\n      toast.error(error.message);\n      return false;\n    }\n\n    // Set the button to loading \n    setIsLoading(true);\n\n    try {\n      await updatePost(postInput, posts, postDispatch);\n  \n      // Set the button to stop loading\n      setIsLoading(false);\n  \n      // Close the modal\n      setOpenModal(false);\n\n      return true;\n    } catch (error) {\n      // Set the button to stop loading\n      setIsLoading(false);\n\n      toast.error('Something went wrong when trying to add a post');\n      return false;\n    }\n  }\n\n  return (\n    <FormModal\n      title='Edit post'\n      triggerProps = {{ icon: 'edit', content: 'Edit post', color: 'yellow' }}\n      inputs = {[\n        { id: 0, type: 'field', title: 'Title', props: title.props },\n        { id: 1, type: 'textarea', title: 'Body', props: body.props }\n      ]}\n      submitProps = {{ icon: 'edit', content: 'Edit post' }}\n      update = { handleEditPost }\n      loadingState = {{ isLoading, setIsLoading }}\n      modalState = {{ openModal, setOpenModal }}\n    />\n  );\n\n}\n","import React, { Dispatch } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Item, Header } from 'semantic-ui-react';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { createSelector } from 'reselect';\n\nimport { Post } from '../../models/Post';\nimport { State } from '../../models/State';\nimport { Params } from '../../models/Params';\nimport { AddPost } from './AddPost';\nimport { deletePost } from '../../actions/posts.actions';\nimport { PostsAction } from '../../models/PostsAction';\nimport { toast } from 'react-toastify';\nimport { EditPost } from './EditPost';\n\nexport function Posts(props: RouteComponentProps<Params>) {\n  // Get userId from params\n  const { id } = props.match.params;\n  const userId: number = Number(id);\n\n  const postDispatch: Dispatch<PostsAction> = useDispatch();\n\n  // Create a selector to get posts by the user from state\n  const selectUserPosts = createSelector(\n    (state: State) => state.posts,\n    (posts: Array<Post>) => posts.filter((post: Post) => post.userId === userId),\n  );\n  \n  // Use the created selector to get the posts from state\n  const userPosts = useSelector(selectUserPosts);\n\n  const handlePostDelete = async (id: number | undefined): Promise<void> => {\n    try {\n      await deletePost(id, userPosts, postDispatch);\n    } catch (error) {\n      toast.error('There was an issue trying to delete the user');\n    }\n  }\n\n  return (\n    <Item.Group divided>\n      <Button icon='arrow left' as={Link} to='/users' content='Back to Users' style={{ marginBottom: 10 }} />\n\n      <Header as='h3'>\n        Posts\n      </Header>\n\n      <AddPost userId={userId} />\n\n      {userPosts.map((post: Post) =>\n        <Item key={post.id}>\n          <Item.Content verticalAlign='middle'>\n            <Item.Header>{ post.title }</Item.Header>\n            <Item.Description>{ post.body }</Item.Description>\n            <Item.Extra>\n              <Button icon='comments' content='View comments' as={Link} to={`/comments/${post.id}`} />\n              <EditPost post={post} />\n              <Button style={{ marginTop: 5 }} color='red' onClick={() => handlePostDelete(post.id)} icon='remove' content='Delete' />\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      )}\n      {userPosts.length === 0 && <p>No posts</p>}\n    </Item.Group>\n  );\n}\n","import React from 'react';\nimport { Header, Icon } from 'semantic-ui-react';\n\nexport function NotFound() {\n  return (\n    <Header as='h2' textAlign='center' icon>\n      <Icon name='settings' />\n        404\n      <Header.Subheader>\n        Page not found\n      </Header.Subheader>\n    </Header>\n  );\n\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { Button, Comment, Header } from 'semantic-ui-react'\nimport { createSelector } from 'reselect';\nimport { useHistory, RouteComponentProps } from 'react-router-dom';\n\nimport { Comment as CommentModal } from '../../models/Comment';\nimport { getGravatar } from '../../utils/lib';\nimport { Params } from '../../models/Params';\nimport { State } from '../../models/State';\n\nexport function Comments(props: RouteComponentProps<Params>) {\n  // Get userId from params\n  const { id } = props.match.params;\n  const userId: number = Number(id);\n\n  const history = useHistory();\n\n  // Create a selector to get comments by the post from state\n  const selectPostComments = createSelector(\n    (state: State) => state.comments,\n    (comments: Array<CommentModal>) => comments.filter((comment: CommentModal) => comment.postId === userId),\n  );\n\n  // Use the created selector to get the comments from state\n  const postComments = useSelector(selectPostComments);\n\n  const handleBack = (): void => {\n    history.goBack();\n  }\n\n  return (\n    <Comment.Group>\n      <Button icon='arrow left' onClick={handleBack} content='Back to Posts' style={{ marginBottom: 10 }} />\n\n      <Header as='h3' dividing>\n        Comments\n      </Header>\n      {\n        postComments.map((comment: CommentModal) =>\n          <Comment key={comment.id}>\n            <Comment.Avatar src={getGravatar(comment.email)} />\n            <Comment.Content>\n              <Comment.Author>{ comment.email }</Comment.Author>\n              <Comment.Text>{ comment.body }</Comment.Text>\n            </Comment.Content>\n          </Comment>\n        )\n      }\n      {postComments.length === 0 && <p>No comments</p>}\n    </Comment.Group>\n  );\n}\n","import Joi from '@hapi/joi';\n\nexport const userValidation = Joi.object({\n  id: Joi.number(),\n  name: Joi.string().min(2).max(32).required(),\n  email: Joi.string().email({\n    minDomainSegments: 2,\n    tlds: { allow: ['com', 'net', 'biz', 'tv', 'info', 'ca', 'org', 'me', 'io'] }\n  }).required(),\n});\n","import React, { useState, Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { useFormInput } from '../hooks/customHooks';\nimport { userValidation } from '../../validation/userValidation';\nimport { addUser } from '../../actions/users.actions';\nimport { UsersAction } from '../../models/UsersAction';\nimport { User } from '../../models/User';\nimport { State } from '../../models/State';\nimport { FormModal } from '../layout/FormModal';\n\nexport function AddUser() {\n\n  const userDispatch: Dispatch<UsersAction> = useDispatch();\n  const users: Array<User> = useSelector((state: State) => state.users);\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ openModal, setOpenModal ] = useState(false);\n\n  const name = useFormInput('');\n  const email = useFormInput('');\n\n  const handleAddUser = async (): Promise<boolean> => {\n    const userInput: User = { name: name.props.value, email: email.props.value };\n\n    // Check if the user input is correct\n    const { error } = userValidation.validate(userInput);\n    if (error) {\n      toast.error(error.message);\n      return false;\n    }\n\n    // Set the button to loading\n    setIsLoading(true);\n\n    try {\n      await addUser(userInput, users, userDispatch);\n  \n      // Set the button to stop loading\n      setIsLoading(false);\n  \n      // Close the modal\n      setOpenModal(false);\n\n      // Reset inputs\n      name.reset();\n      email.reset();\n\n      return true;\n    } catch (error) {\n      // Set the button to stop loading\n      setIsLoading(false);\n\n      toast.error('Something went wrong when trying to add a user');\n      return false;\n    }\n  }\n\n  return (\n    <FormModal\n      title='Add user'\n      triggerProps = {{ icon: 'add user', content: 'Add user', color: 'green' }}\n      inputs = {[\n        { id: 0, type: 'field', title: 'Name', props: name.props },\n        { id: 1, type: 'field', title: 'Email', props: email.props }\n      ]}\n      submitProps = {{ icon: 'add user', content: 'Add user' }}\n      update = { handleAddUser }\n      loadingState = {{ isLoading, setIsLoading }}\n      modalState = {{ openModal, setOpenModal }}\n    />\n  );\n\n}\n","import React, { useState, Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { useFormInput } from '../hooks/customHooks';\nimport { userValidation } from '../../validation/userValidation';\nimport { updateUser } from '../../actions/users.actions';\nimport { UsersAction } from '../../models/UsersAction';\nimport { User } from '../../models/User';\nimport { State } from '../../models/State';\nimport { FormModal } from '../layout/FormModal';\n\ninterface Props {\n  user: User,\n}\n\nexport function EditUser(props: Props) {\n  const { user } = props;\n\n  const userDispatch: Dispatch<UsersAction> = useDispatch();\n  const users: Array<User> = useSelector((state: State) => state.users);\n\n  const [ isLoading, setIsLoading ] = useState(false);\n  const [ openModal, setOpenModal ] = useState(false);\n\n  const name = useFormInput(user.name);\n  const email = useFormInput(user.email);\n\n\n  const handleUpdateUser = async (): Promise<boolean> => {\n    const userInput: User = { id: user.id, name: name.props.value, email: email.props.value };\n\n    // Check if the user input is correct\n    const { error } = userValidation.validate(userInput);\n    if (error) {\n      toast.error(error.message);\n      return false;\n    }\n\n    // Set the button to loading\n    setIsLoading(true);\n\n    try {\n      await updateUser(userInput, users, userDispatch);\n  \n      // Set the button to stop loading\n      setIsLoading(false);\n\n      // Close modal\n      setOpenModal(false);\n      \n      return true;\n    } catch (error) {\n      // Set the button to stop loading\n      setIsLoading(false);\n\n      toast.error('Something went wrong when trying to update a user');\n      return false;\n    }\n  }\n\n  return (\n    <FormModal\n      title='Update user'\n      triggerProps = {{ icon: 'edit', content: 'Edit user', color: 'yellow' }}\n      inputs = {[\n        { id: 0, type: 'field', title: 'Name', props: name.props },\n        { id: 1, type: 'field', title: 'Email', props: email.props }\n      ]}\n      submitProps = {{ icon: 'add user', content: 'Update user' }}\n      update = {handleUpdateUser}\n      loadingState = {{isLoading, setIsLoading}}\n      modalState = {{ openModal, setOpenModal }}\n    />\n  );\n\n}\n","import React, { Dispatch } from 'react'\nimport { Card, Image, Button, Header } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { User } from '../../models/User';\nimport { State } from '../../models/State';\nimport { deleteUser } from '../../actions/users.actions';\nimport { UsersAction } from '../../models/UsersAction';\nimport { AddUser } from './AddUser';\nimport { EditUser } from './EditUser';\n\nexport function Users() {\n  const userDispatch: Dispatch<UsersAction> = useDispatch();\n\n  // Get the users from state\n  const users: Array<User> = useSelector((state: State) => state.users);\n\n  const handleUserDelete = async (id: number | undefined): Promise<void> => {\n    try {\n      await deleteUser(id, users, userDispatch);\n    } catch (error) {\n      toast.error('There was an issue trying to delete the user');\n    }\n  }\n\n  return (\n    <div>\n      <Header dividing as='h2'>\n        Users\n      </Header>\n      \n      <AddUser />\n\n      <Card.Group>\n        {users.map((user: User) => \n          <Card key={user.id}>\n            <Image src={user.avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>{user.name}</Card.Header>\n              <Card.Meta>\n                <span>{user.email}</span>\n              </Card.Meta>\n            </Card.Content>\n            <Card.Content extra>\n              <Button as={Link} to={`/posts/${user.id}`} content='View posts' icon='list' />\n              <EditUser user={user} />\n              <Button style={{ marginTop: 5 }} color='red' onClick={() => handleUserDelete(user.id)} icon='remove' content='Delete' />\n            </Card.Content>\n          </Card>\n        )}\n        {users.length === 0 && <p>No users</p>}\n      </Card.Group>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nimport { Login } from '../auth/Login';\nimport { Register } from '../auth/Register';\nimport { AuthenticatedRoute } from './AuthenticatedRoute';\nimport { Posts } from '../posts/Posts';\nimport { NotFound } from '../layout/NotFound';\nimport { Comments } from '../comments/Comments';\nimport { Users } from '../users/Users';\n\nexport const Routes = () => {\n  return (\n    <Container>\n      <ToastContainer />\n      <Switch>\n        <Route exect path='/login' component={Login} />\n        <Route exect path='/register' component={Register} />\n        <AuthenticatedRoute exect path='/users' component={Users} />\n        <AuthenticatedRoute exect path='/posts/:id' component={Posts} />\n        <AuthenticatedRoute exect path='/comments/:id' component={Comments} />\n        <AuthenticatedRoute path='/' to='/users' />\n        <Route component={NotFound} />\n      </Switch>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/layout/Navbar';\nimport { Routes } from './components/routing/Routes';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Navbar />\n      <Switch>\n        <Route component={Routes} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Auth } from '../models/Auth';\nimport { SET_AUTH } from '../actions/types';\nimport { AuthAction } from '../models/AuthAction';\n\nconst initialState: Auth = {\n  status: 'unauthorized'\n};\n\nexport const authReducer = (state: Auth = initialState, action: AuthAction) => {\n  switch (action.type) {\n    case SET_AUTH:\n      return action.auth;\n    default:\n      return state;\n  }\n}\n","import { SET_USERS, CLEAR_USERS } from '../actions/types';\nimport { User } from '../models/User';\nimport { UsersAction } from '../models/UsersAction';\n\nconst initialState: Array<User> = [];\n\nexport const usersReducer = (state: Array<User> = initialState, action: UsersAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n    case CLEAR_USERS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { SET_POSTS, CLEAR_POSTS } from '../actions/types';\nimport { PostsAction } from '../models/PostsAction';\nimport { Post } from '../models/Post';\n\nconst initialState: Array<Post> = [];\n\nexport const postsReducer = (state: Array<Post> = initialState, action: PostsAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case CLEAR_POSTS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { SET_COMMENTS, CLEAR_COMMENTS } from '../actions/types';\nimport { CommentsAction } from '../models/CommentsAction';\n\nconst initialState: Array<Comment> = [];\n\nexport const commentsReducer = (state: Array<Comment> = initialState, action: CommentsAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n    case CLEAR_COMMENTS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { authReducer } from './auth.reducer';\nimport { usersReducer } from './users.reducer';\nimport { postsReducer } from './posts.reducer';\nimport { commentsReducer } from './comments.reducer';\n\n// Combine all of the reducers that we create\nconst allReducers = combineReducers({\n  auth: authReducer,\n  users: usersReducer,\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider as ReduxProvider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport allReducers from './reducers';\n\nconst store = createStore(\n  allReducers,\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n      <App />\n  </ReduxProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}